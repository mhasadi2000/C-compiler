Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    NEG
    NUMBER
    REAL

Grammar

Rule 0     S' -> program_p
Rule 1     program_p -> PROGRAM declarations compound_statement
Rule 2     declarations -> VAR declarion_list
Rule 3     declarations -> <empty>
Rule 4     declarion_list -> identifier_list COLON type
Rule 5     declarion_list -> declarion_list SEMICOLON identifier_list COLON type
Rule 6     identifier_list -> IDENTIFIER
Rule 7     identifier_list -> identifier_list COMMA IDENTIFIER
Rule 8     type -> INT
Rule 9     compound_statement -> BEGIN statement_list END
Rule 10    statement_list -> statement
Rule 11    statement_list -> statement_list SEMICOLON statement
Rule 12    statement -> IDENTIFIER ASSIGN expression
Rule 13    statement -> IF expression THEN statement ELSE statement
Rule 14    statement -> IF expression THEN statement
Rule 15    statement -> WHILE expression DO statement
Rule 16    statement -> compound_statement
Rule 17    statement -> PRINT LPAREN expression RPAREN
Rule 18    int_expression -> INT
Rule 19    expression -> IDENTIFIER
Rule 20    int_expression -> int_expression PLUS int_expression
Rule 21    int_expression -> int_expression MINUS int_expression
Rule 22    int_expression -> int_expression MUL int_expression
Rule 23    int_expression -> int_expression DIV int_expression
Rule 24    int_expression -> int_expression MOD int_expression
Rule 25    int_expression -> UMINUS int_expression
Rule 26    bool_expression -> int_expression LT int_expression
Rule 27    bool_expression -> int_expression EQL int_expression
Rule 28    bool_expression -> int_expression GT int_expression
Rule 29    bool_expression -> int_expression NEQL int_expression
Rule 30    bool_expression -> int_expression LE int_expression
Rule 31    bool_expression -> int_expression GE int_expression
Rule 32    bool_expression -> bool_expression AND bool_expression
Rule 33    bool_expression -> bool_expression OR bool_expression
Rule 34    bool_expression -> NOT bool_expression
Rule 35    expression -> LPAREN expression RPAREN
Rule 36    expression -> bool_expression
Rule 37    expression -> int_expression

Terminals, with rules where they appear

AND                  : 32
ASSIGN               : 12
BEGIN                : 9
COLON                : 4 5
COMMA                : 7
DIV                  : 23
DO                   : 15
ELSE                 : 13
END                  : 9
EQL                  : 27
GE                   : 31
GT                   : 28
IDENTIFIER           : 6 7 12 19
IF                   : 13 14
INT                  : 8 18
LE                   : 30
LPAREN               : 17 35
LT                   : 26
MINUS                : 21
MOD                  : 24
MUL                  : 22
NEG                  : 
NEQL                 : 29
NOT                  : 34
NUMBER               : 
OR                   : 33
PLUS                 : 20
PRINT                : 17
PROGRAM              : 1
REAL                 : 
RPAREN               : 17 35
SEMICOLON            : 5 11
THEN                 : 13 14
UMINUS               : 25
VAR                  : 2
WHILE                : 15
error                : 

Nonterminals, with rules where they appear

bool_expression      : 32 32 33 33 34 36
compound_statement   : 1 16
declarations         : 1
declarion_list       : 2 5
expression           : 12 13 14 15 17 35
identifier_list      : 4 5 7
int_expression       : 20 20 21 21 22 22 23 23 24 24 25 26 26 27 27 28 28 29 29 30 30 31 31 37
program_p            : 0
statement            : 10 11 13 13 14 15
statement_list       : 9 11
type                 : 4 5

Parsing method: LALR

state 0

    (0) S' -> . program_p
    (1) program_p -> . PROGRAM declarations compound_statement

    PROGRAM         shift and go to state 2

    program_p                      shift and go to state 1

state 1

    (0) S' -> program_p .



state 2

    (1) program_p -> PROGRAM . declarations compound_statement
    (2) declarations -> . VAR declarion_list
    (3) declarations -> .

    VAR             shift and go to state 4
    BEGIN           reduce using rule 3 (declarations -> .)

    declarations                   shift and go to state 3

state 3

    (1) program_p -> PROGRAM declarations . compound_statement
    (9) compound_statement -> . BEGIN statement_list END

    BEGIN           shift and go to state 6

    compound_statement             shift and go to state 5

state 4

    (2) declarations -> VAR . declarion_list
    (4) declarion_list -> . identifier_list COLON type
    (5) declarion_list -> . declarion_list SEMICOLON identifier_list COLON type
    (6) identifier_list -> . IDENTIFIER
    (7) identifier_list -> . identifier_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 9

    declarion_list                 shift and go to state 7
    identifier_list                shift and go to state 8

state 5

    (1) program_p -> PROGRAM declarations compound_statement .

    $end            reduce using rule 1 (program_p -> PROGRAM declarations compound_statement .)


state 6

    (9) compound_statement -> BEGIN . statement_list END
    (10) statement_list -> . statement
    (11) statement_list -> . statement_list SEMICOLON statement
    (12) statement -> . IDENTIFIER ASSIGN expression
    (13) statement -> . IF expression THEN statement ELSE statement
    (14) statement -> . IF expression THEN statement
    (15) statement -> . WHILE expression DO statement
    (16) statement -> . compound_statement
    (17) statement -> . PRINT LPAREN expression RPAREN
    (9) compound_statement -> . BEGIN statement_list END

    IDENTIFIER      shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    PRINT           shift and go to state 16
    BEGIN           shift and go to state 6

    statement_list                 shift and go to state 10
    statement                      shift and go to state 11
    compound_statement             shift and go to state 15

state 7

    (2) declarations -> VAR declarion_list .
    (5) declarion_list -> declarion_list . SEMICOLON identifier_list COLON type

    BEGIN           reduce using rule 2 (declarations -> VAR declarion_list .)
    SEMICOLON       shift and go to state 17


state 8

    (4) declarion_list -> identifier_list . COLON type
    (7) identifier_list -> identifier_list . COMMA IDENTIFIER

    COLON           shift and go to state 18
    COMMA           shift and go to state 19


state 9

    (6) identifier_list -> IDENTIFIER .

    COLON           reduce using rule 6 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 6 (identifier_list -> IDENTIFIER .)


state 10

    (9) compound_statement -> BEGIN statement_list . END
    (11) statement_list -> statement_list . SEMICOLON statement

    END             shift and go to state 20
    SEMICOLON       shift and go to state 21


state 11

    (10) statement_list -> statement .

    END             reduce using rule 10 (statement_list -> statement .)
    SEMICOLON       reduce using rule 10 (statement_list -> statement .)


state 12

    (12) statement -> IDENTIFIER . ASSIGN expression

    ASSIGN          shift and go to state 22


state 13

    (13) statement -> IF . expression THEN statement ELSE statement
    (14) statement -> IF . expression THEN statement
    (19) expression -> . IDENTIFIER
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . bool_expression
    (37) expression -> . int_expression
    (26) bool_expression -> . int_expression LT int_expression
    (27) bool_expression -> . int_expression EQL int_expression
    (28) bool_expression -> . int_expression GT int_expression
    (29) bool_expression -> . int_expression NEQL int_expression
    (30) bool_expression -> . int_expression LE int_expression
    (31) bool_expression -> . int_expression GE int_expression
    (32) bool_expression -> . bool_expression AND bool_expression
    (33) bool_expression -> . bool_expression OR bool_expression
    (34) bool_expression -> . NOT bool_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    IDENTIFIER      shift and go to state 24
    LPAREN          shift and go to state 25
    NOT             shift and go to state 28
    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    expression                     shift and go to state 23
    bool_expression                shift and go to state 26
    int_expression                 shift and go to state 27

state 14

    (15) statement -> WHILE . expression DO statement
    (19) expression -> . IDENTIFIER
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . bool_expression
    (37) expression -> . int_expression
    (26) bool_expression -> . int_expression LT int_expression
    (27) bool_expression -> . int_expression EQL int_expression
    (28) bool_expression -> . int_expression GT int_expression
    (29) bool_expression -> . int_expression NEQL int_expression
    (30) bool_expression -> . int_expression LE int_expression
    (31) bool_expression -> . int_expression GE int_expression
    (32) bool_expression -> . bool_expression AND bool_expression
    (33) bool_expression -> . bool_expression OR bool_expression
    (34) bool_expression -> . NOT bool_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    IDENTIFIER      shift and go to state 24
    LPAREN          shift and go to state 25
    NOT             shift and go to state 28
    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    expression                     shift and go to state 31
    bool_expression                shift and go to state 26
    int_expression                 shift and go to state 27

state 15

    (16) statement -> compound_statement .

    END             reduce using rule 16 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 16 (statement -> compound_statement .)
    ELSE            reduce using rule 16 (statement -> compound_statement .)


state 16

    (17) statement -> PRINT . LPAREN expression RPAREN

    LPAREN          shift and go to state 32


state 17

    (5) declarion_list -> declarion_list SEMICOLON . identifier_list COLON type
    (6) identifier_list -> . IDENTIFIER
    (7) identifier_list -> . identifier_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 9

    identifier_list                shift and go to state 33

state 18

    (4) declarion_list -> identifier_list COLON . type
    (8) type -> . INT

    INT             shift and go to state 35

    type                           shift and go to state 34

state 19

    (7) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 36


state 20

    (9) compound_statement -> BEGIN statement_list END .

    $end            reduce using rule 9 (compound_statement -> BEGIN statement_list END .)
    END             reduce using rule 9 (compound_statement -> BEGIN statement_list END .)
    SEMICOLON       reduce using rule 9 (compound_statement -> BEGIN statement_list END .)
    ELSE            reduce using rule 9 (compound_statement -> BEGIN statement_list END .)


state 21

    (11) statement_list -> statement_list SEMICOLON . statement
    (12) statement -> . IDENTIFIER ASSIGN expression
    (13) statement -> . IF expression THEN statement ELSE statement
    (14) statement -> . IF expression THEN statement
    (15) statement -> . WHILE expression DO statement
    (16) statement -> . compound_statement
    (17) statement -> . PRINT LPAREN expression RPAREN
    (9) compound_statement -> . BEGIN statement_list END

    IDENTIFIER      shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    PRINT           shift and go to state 16
    BEGIN           shift and go to state 6

    statement                      shift and go to state 37
    compound_statement             shift and go to state 15

state 22

    (12) statement -> IDENTIFIER ASSIGN . expression
    (19) expression -> . IDENTIFIER
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . bool_expression
    (37) expression -> . int_expression
    (26) bool_expression -> . int_expression LT int_expression
    (27) bool_expression -> . int_expression EQL int_expression
    (28) bool_expression -> . int_expression GT int_expression
    (29) bool_expression -> . int_expression NEQL int_expression
    (30) bool_expression -> . int_expression LE int_expression
    (31) bool_expression -> . int_expression GE int_expression
    (32) bool_expression -> . bool_expression AND bool_expression
    (33) bool_expression -> . bool_expression OR bool_expression
    (34) bool_expression -> . NOT bool_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    IDENTIFIER      shift and go to state 24
    LPAREN          shift and go to state 25
    NOT             shift and go to state 28
    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    expression                     shift and go to state 38
    bool_expression                shift and go to state 26
    int_expression                 shift and go to state 27

state 23

    (13) statement -> IF expression . THEN statement ELSE statement
    (14) statement -> IF expression . THEN statement

    THEN            shift and go to state 39


state 24

    (19) expression -> IDENTIFIER .

    THEN            reduce using rule 19 (expression -> IDENTIFIER .)
    DO              reduce using rule 19 (expression -> IDENTIFIER .)
    END             reduce using rule 19 (expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 19 (expression -> IDENTIFIER .)
    ELSE            reduce using rule 19 (expression -> IDENTIFIER .)
    RPAREN          reduce using rule 19 (expression -> IDENTIFIER .)


state 25

    (35) expression -> LPAREN . expression RPAREN
    (19) expression -> . IDENTIFIER
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . bool_expression
    (37) expression -> . int_expression
    (26) bool_expression -> . int_expression LT int_expression
    (27) bool_expression -> . int_expression EQL int_expression
    (28) bool_expression -> . int_expression GT int_expression
    (29) bool_expression -> . int_expression NEQL int_expression
    (30) bool_expression -> . int_expression LE int_expression
    (31) bool_expression -> . int_expression GE int_expression
    (32) bool_expression -> . bool_expression AND bool_expression
    (33) bool_expression -> . bool_expression OR bool_expression
    (34) bool_expression -> . NOT bool_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    IDENTIFIER      shift and go to state 24
    LPAREN          shift and go to state 25
    NOT             shift and go to state 28
    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    expression                     shift and go to state 40
    bool_expression                shift and go to state 26
    int_expression                 shift and go to state 27

state 26

    (36) expression -> bool_expression .
    (32) bool_expression -> bool_expression . AND bool_expression
    (33) bool_expression -> bool_expression . OR bool_expression

    THEN            reduce using rule 36 (expression -> bool_expression .)
    DO              reduce using rule 36 (expression -> bool_expression .)
    END             reduce using rule 36 (expression -> bool_expression .)
    SEMICOLON       reduce using rule 36 (expression -> bool_expression .)
    ELSE            reduce using rule 36 (expression -> bool_expression .)
    RPAREN          reduce using rule 36 (expression -> bool_expression .)
    AND             shift and go to state 41
    OR              shift and go to state 42


state 27

    (37) expression -> int_expression .
    (26) bool_expression -> int_expression . LT int_expression
    (27) bool_expression -> int_expression . EQL int_expression
    (28) bool_expression -> int_expression . GT int_expression
    (29) bool_expression -> int_expression . NEQL int_expression
    (30) bool_expression -> int_expression . LE int_expression
    (31) bool_expression -> int_expression . GE int_expression
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    THEN            reduce using rule 37 (expression -> int_expression .)
    DO              reduce using rule 37 (expression -> int_expression .)
    END             reduce using rule 37 (expression -> int_expression .)
    SEMICOLON       reduce using rule 37 (expression -> int_expression .)
    ELSE            reduce using rule 37 (expression -> int_expression .)
    RPAREN          reduce using rule 37 (expression -> int_expression .)
    LT              shift and go to state 43
    EQL             shift and go to state 44
    GT              shift and go to state 45
    NEQL            shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    MOD             shift and go to state 53


state 28

    (34) bool_expression -> NOT . bool_expression
    (26) bool_expression -> . int_expression LT int_expression
    (27) bool_expression -> . int_expression EQL int_expression
    (28) bool_expression -> . int_expression GT int_expression
    (29) bool_expression -> . int_expression NEQL int_expression
    (30) bool_expression -> . int_expression LE int_expression
    (31) bool_expression -> . int_expression GE int_expression
    (32) bool_expression -> . bool_expression AND bool_expression
    (33) bool_expression -> . bool_expression OR bool_expression
    (34) bool_expression -> . NOT bool_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    NOT             shift and go to state 28
    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    bool_expression                shift and go to state 54
    int_expression                 shift and go to state 55

state 29

    (18) int_expression -> INT .

    LT              reduce using rule 18 (int_expression -> INT .)
    EQL             reduce using rule 18 (int_expression -> INT .)
    GT              reduce using rule 18 (int_expression -> INT .)
    NEQL            reduce using rule 18 (int_expression -> INT .)
    LE              reduce using rule 18 (int_expression -> INT .)
    GE              reduce using rule 18 (int_expression -> INT .)
    PLUS            reduce using rule 18 (int_expression -> INT .)
    MINUS           reduce using rule 18 (int_expression -> INT .)
    MUL             reduce using rule 18 (int_expression -> INT .)
    DIV             reduce using rule 18 (int_expression -> INT .)
    MOD             reduce using rule 18 (int_expression -> INT .)
    THEN            reduce using rule 18 (int_expression -> INT .)
    DO              reduce using rule 18 (int_expression -> INT .)
    END             reduce using rule 18 (int_expression -> INT .)
    SEMICOLON       reduce using rule 18 (int_expression -> INT .)
    ELSE            reduce using rule 18 (int_expression -> INT .)
    RPAREN          reduce using rule 18 (int_expression -> INT .)
    AND             reduce using rule 18 (int_expression -> INT .)
    OR              reduce using rule 18 (int_expression -> INT .)


state 30

    (25) int_expression -> UMINUS . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 56

state 31

    (15) statement -> WHILE expression . DO statement

    DO              shift and go to state 57


state 32

    (17) statement -> PRINT LPAREN . expression RPAREN
    (19) expression -> . IDENTIFIER
    (35) expression -> . LPAREN expression RPAREN
    (36) expression -> . bool_expression
    (37) expression -> . int_expression
    (26) bool_expression -> . int_expression LT int_expression
    (27) bool_expression -> . int_expression EQL int_expression
    (28) bool_expression -> . int_expression GT int_expression
    (29) bool_expression -> . int_expression NEQL int_expression
    (30) bool_expression -> . int_expression LE int_expression
    (31) bool_expression -> . int_expression GE int_expression
    (32) bool_expression -> . bool_expression AND bool_expression
    (33) bool_expression -> . bool_expression OR bool_expression
    (34) bool_expression -> . NOT bool_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    IDENTIFIER      shift and go to state 24
    LPAREN          shift and go to state 25
    NOT             shift and go to state 28
    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    expression                     shift and go to state 58
    bool_expression                shift and go to state 26
    int_expression                 shift and go to state 27

state 33

    (5) declarion_list -> declarion_list SEMICOLON identifier_list . COLON type
    (7) identifier_list -> identifier_list . COMMA IDENTIFIER

    COLON           shift and go to state 59
    COMMA           shift and go to state 19


state 34

    (4) declarion_list -> identifier_list COLON type .

    SEMICOLON       reduce using rule 4 (declarion_list -> identifier_list COLON type .)
    BEGIN           reduce using rule 4 (declarion_list -> identifier_list COLON type .)


state 35

    (8) type -> INT .

    SEMICOLON       reduce using rule 8 (type -> INT .)
    BEGIN           reduce using rule 8 (type -> INT .)


state 36

    (7) identifier_list -> identifier_list COMMA IDENTIFIER .

    COLON           reduce using rule 7 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 7 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 37

    (11) statement_list -> statement_list SEMICOLON statement .

    END             reduce using rule 11 (statement_list -> statement_list SEMICOLON statement .)
    SEMICOLON       reduce using rule 11 (statement_list -> statement_list SEMICOLON statement .)


state 38

    (12) statement -> IDENTIFIER ASSIGN expression .

    END             reduce using rule 12 (statement -> IDENTIFIER ASSIGN expression .)
    SEMICOLON       reduce using rule 12 (statement -> IDENTIFIER ASSIGN expression .)
    ELSE            reduce using rule 12 (statement -> IDENTIFIER ASSIGN expression .)


state 39

    (13) statement -> IF expression THEN . statement ELSE statement
    (14) statement -> IF expression THEN . statement
    (12) statement -> . IDENTIFIER ASSIGN expression
    (13) statement -> . IF expression THEN statement ELSE statement
    (14) statement -> . IF expression THEN statement
    (15) statement -> . WHILE expression DO statement
    (16) statement -> . compound_statement
    (17) statement -> . PRINT LPAREN expression RPAREN
    (9) compound_statement -> . BEGIN statement_list END

    IDENTIFIER      shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    PRINT           shift and go to state 16
    BEGIN           shift and go to state 6

    statement                      shift and go to state 60
    compound_statement             shift and go to state 15

state 40

    (35) expression -> LPAREN expression . RPAREN

    RPAREN          shift and go to state 61


state 41

    (32) bool_expression -> bool_expression AND . bool_expression
    (26) bool_expression -> . int_expression LT int_expression
    (27) bool_expression -> . int_expression EQL int_expression
    (28) bool_expression -> . int_expression GT int_expression
    (29) bool_expression -> . int_expression NEQL int_expression
    (30) bool_expression -> . int_expression LE int_expression
    (31) bool_expression -> . int_expression GE int_expression
    (32) bool_expression -> . bool_expression AND bool_expression
    (33) bool_expression -> . bool_expression OR bool_expression
    (34) bool_expression -> . NOT bool_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    NOT             shift and go to state 28
    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    bool_expression                shift and go to state 62
    int_expression                 shift and go to state 55

state 42

    (33) bool_expression -> bool_expression OR . bool_expression
    (26) bool_expression -> . int_expression LT int_expression
    (27) bool_expression -> . int_expression EQL int_expression
    (28) bool_expression -> . int_expression GT int_expression
    (29) bool_expression -> . int_expression NEQL int_expression
    (30) bool_expression -> . int_expression LE int_expression
    (31) bool_expression -> . int_expression GE int_expression
    (32) bool_expression -> . bool_expression AND bool_expression
    (33) bool_expression -> . bool_expression OR bool_expression
    (34) bool_expression -> . NOT bool_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    NOT             shift and go to state 28
    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    bool_expression                shift and go to state 63
    int_expression                 shift and go to state 55

state 43

    (26) bool_expression -> int_expression LT . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 64

state 44

    (27) bool_expression -> int_expression EQL . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 65

state 45

    (28) bool_expression -> int_expression GT . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 66

state 46

    (29) bool_expression -> int_expression NEQL . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 67

state 47

    (30) bool_expression -> int_expression LE . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 68

state 48

    (31) bool_expression -> int_expression GE . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 69

state 49

    (20) int_expression -> int_expression PLUS . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 70

state 50

    (21) int_expression -> int_expression MINUS . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 71

state 51

    (22) int_expression -> int_expression MUL . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 72

state 52

    (23) int_expression -> int_expression DIV . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 73

state 53

    (24) int_expression -> int_expression MOD . int_expression
    (18) int_expression -> . INT
    (20) int_expression -> . int_expression PLUS int_expression
    (21) int_expression -> . int_expression MINUS int_expression
    (22) int_expression -> . int_expression MUL int_expression
    (23) int_expression -> . int_expression DIV int_expression
    (24) int_expression -> . int_expression MOD int_expression
    (25) int_expression -> . UMINUS int_expression

    INT             shift and go to state 29
    UMINUS          shift and go to state 30

    int_expression                 shift and go to state 74

state 54

    (34) bool_expression -> NOT bool_expression .
    (32) bool_expression -> bool_expression . AND bool_expression
    (33) bool_expression -> bool_expression . OR bool_expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 34 (bool_expression -> NOT bool_expression .)
    DO              reduce using rule 34 (bool_expression -> NOT bool_expression .)
    END             reduce using rule 34 (bool_expression -> NOT bool_expression .)
    SEMICOLON       reduce using rule 34 (bool_expression -> NOT bool_expression .)
    ELSE            reduce using rule 34 (bool_expression -> NOT bool_expression .)
    RPAREN          reduce using rule 34 (bool_expression -> NOT bool_expression .)
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! AND             [ reduce using rule 34 (bool_expression -> NOT bool_expression .) ]
  ! OR              [ reduce using rule 34 (bool_expression -> NOT bool_expression .) ]


state 55

    (26) bool_expression -> int_expression . LT int_expression
    (27) bool_expression -> int_expression . EQL int_expression
    (28) bool_expression -> int_expression . GT int_expression
    (29) bool_expression -> int_expression . NEQL int_expression
    (30) bool_expression -> int_expression . LE int_expression
    (31) bool_expression -> int_expression . GE int_expression
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    LT              shift and go to state 43
    EQL             shift and go to state 44
    GT              shift and go to state 45
    NEQL            shift and go to state 46
    LE              shift and go to state 47
    GE              shift and go to state 48
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    MOD             shift and go to state 53


state 56

    (25) int_expression -> UMINUS int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    LT              reduce using rule 25 (int_expression -> UMINUS int_expression .)
    EQL             reduce using rule 25 (int_expression -> UMINUS int_expression .)
    GT              reduce using rule 25 (int_expression -> UMINUS int_expression .)
    NEQL            reduce using rule 25 (int_expression -> UMINUS int_expression .)
    LE              reduce using rule 25 (int_expression -> UMINUS int_expression .)
    GE              reduce using rule 25 (int_expression -> UMINUS int_expression .)
    PLUS            reduce using rule 25 (int_expression -> UMINUS int_expression .)
    MINUS           reduce using rule 25 (int_expression -> UMINUS int_expression .)
    MUL             reduce using rule 25 (int_expression -> UMINUS int_expression .)
    DIV             reduce using rule 25 (int_expression -> UMINUS int_expression .)
    MOD             reduce using rule 25 (int_expression -> UMINUS int_expression .)
    THEN            reduce using rule 25 (int_expression -> UMINUS int_expression .)
    DO              reduce using rule 25 (int_expression -> UMINUS int_expression .)
    END             reduce using rule 25 (int_expression -> UMINUS int_expression .)
    SEMICOLON       reduce using rule 25 (int_expression -> UMINUS int_expression .)
    ELSE            reduce using rule 25 (int_expression -> UMINUS int_expression .)
    RPAREN          reduce using rule 25 (int_expression -> UMINUS int_expression .)
    AND             reduce using rule 25 (int_expression -> UMINUS int_expression .)
    OR              reduce using rule 25 (int_expression -> UMINUS int_expression .)

  ! PLUS            [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 50 ]
  ! MUL             [ shift and go to state 51 ]
  ! DIV             [ shift and go to state 52 ]
  ! MOD             [ shift and go to state 53 ]


state 57

    (15) statement -> WHILE expression DO . statement
    (12) statement -> . IDENTIFIER ASSIGN expression
    (13) statement -> . IF expression THEN statement ELSE statement
    (14) statement -> . IF expression THEN statement
    (15) statement -> . WHILE expression DO statement
    (16) statement -> . compound_statement
    (17) statement -> . PRINT LPAREN expression RPAREN
    (9) compound_statement -> . BEGIN statement_list END

    IDENTIFIER      shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    PRINT           shift and go to state 16
    BEGIN           shift and go to state 6

    statement                      shift and go to state 75
    compound_statement             shift and go to state 15

state 58

    (17) statement -> PRINT LPAREN expression . RPAREN

    RPAREN          shift and go to state 76


state 59

    (5) declarion_list -> declarion_list SEMICOLON identifier_list COLON . type
    (8) type -> . INT

    INT             shift and go to state 35

    type                           shift and go to state 77

state 60

    (13) statement -> IF expression THEN statement . ELSE statement
    (14) statement -> IF expression THEN statement .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 78
    END             reduce using rule 14 (statement -> IF expression THEN statement .)
    SEMICOLON       reduce using rule 14 (statement -> IF expression THEN statement .)

  ! ELSE            [ reduce using rule 14 (statement -> IF expression THEN statement .) ]


state 61

    (35) expression -> LPAREN expression RPAREN .

    THEN            reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    DO              reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    END             reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    ELSE            reduce using rule 35 (expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 35 (expression -> LPAREN expression RPAREN .)


state 62

    (32) bool_expression -> bool_expression AND bool_expression .
    (32) bool_expression -> bool_expression . AND bool_expression
    (33) bool_expression -> bool_expression . OR bool_expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 32 (bool_expression -> bool_expression AND bool_expression .)
    DO              reduce using rule 32 (bool_expression -> bool_expression AND bool_expression .)
    END             reduce using rule 32 (bool_expression -> bool_expression AND bool_expression .)
    SEMICOLON       reduce using rule 32 (bool_expression -> bool_expression AND bool_expression .)
    ELSE            reduce using rule 32 (bool_expression -> bool_expression AND bool_expression .)
    RPAREN          reduce using rule 32 (bool_expression -> bool_expression AND bool_expression .)
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! AND             [ reduce using rule 32 (bool_expression -> bool_expression AND bool_expression .) ]
  ! OR              [ reduce using rule 32 (bool_expression -> bool_expression AND bool_expression .) ]


state 63

    (33) bool_expression -> bool_expression OR bool_expression .
    (32) bool_expression -> bool_expression . AND bool_expression
    (33) bool_expression -> bool_expression . OR bool_expression

  ! shift/reduce conflict for AND resolved as shift
  ! shift/reduce conflict for OR resolved as shift
    THEN            reduce using rule 33 (bool_expression -> bool_expression OR bool_expression .)
    DO              reduce using rule 33 (bool_expression -> bool_expression OR bool_expression .)
    END             reduce using rule 33 (bool_expression -> bool_expression OR bool_expression .)
    SEMICOLON       reduce using rule 33 (bool_expression -> bool_expression OR bool_expression .)
    ELSE            reduce using rule 33 (bool_expression -> bool_expression OR bool_expression .)
    RPAREN          reduce using rule 33 (bool_expression -> bool_expression OR bool_expression .)
    AND             shift and go to state 41
    OR              shift and go to state 42

  ! AND             [ reduce using rule 33 (bool_expression -> bool_expression OR bool_expression .) ]
  ! OR              [ reduce using rule 33 (bool_expression -> bool_expression OR bool_expression .) ]


state 64

    (26) bool_expression -> int_expression LT int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    AND             reduce using rule 26 (bool_expression -> int_expression LT int_expression .)
    OR              reduce using rule 26 (bool_expression -> int_expression LT int_expression .)
    THEN            reduce using rule 26 (bool_expression -> int_expression LT int_expression .)
    DO              reduce using rule 26 (bool_expression -> int_expression LT int_expression .)
    END             reduce using rule 26 (bool_expression -> int_expression LT int_expression .)
    SEMICOLON       reduce using rule 26 (bool_expression -> int_expression LT int_expression .)
    ELSE            reduce using rule 26 (bool_expression -> int_expression LT int_expression .)
    RPAREN          reduce using rule 26 (bool_expression -> int_expression LT int_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    MOD             shift and go to state 53


state 65

    (27) bool_expression -> int_expression EQL int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    AND             reduce using rule 27 (bool_expression -> int_expression EQL int_expression .)
    OR              reduce using rule 27 (bool_expression -> int_expression EQL int_expression .)
    THEN            reduce using rule 27 (bool_expression -> int_expression EQL int_expression .)
    DO              reduce using rule 27 (bool_expression -> int_expression EQL int_expression .)
    END             reduce using rule 27 (bool_expression -> int_expression EQL int_expression .)
    SEMICOLON       reduce using rule 27 (bool_expression -> int_expression EQL int_expression .)
    ELSE            reduce using rule 27 (bool_expression -> int_expression EQL int_expression .)
    RPAREN          reduce using rule 27 (bool_expression -> int_expression EQL int_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    MOD             shift and go to state 53


state 66

    (28) bool_expression -> int_expression GT int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    AND             reduce using rule 28 (bool_expression -> int_expression GT int_expression .)
    OR              reduce using rule 28 (bool_expression -> int_expression GT int_expression .)
    THEN            reduce using rule 28 (bool_expression -> int_expression GT int_expression .)
    DO              reduce using rule 28 (bool_expression -> int_expression GT int_expression .)
    END             reduce using rule 28 (bool_expression -> int_expression GT int_expression .)
    SEMICOLON       reduce using rule 28 (bool_expression -> int_expression GT int_expression .)
    ELSE            reduce using rule 28 (bool_expression -> int_expression GT int_expression .)
    RPAREN          reduce using rule 28 (bool_expression -> int_expression GT int_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    MOD             shift and go to state 53


state 67

    (29) bool_expression -> int_expression NEQL int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    AND             reduce using rule 29 (bool_expression -> int_expression NEQL int_expression .)
    OR              reduce using rule 29 (bool_expression -> int_expression NEQL int_expression .)
    THEN            reduce using rule 29 (bool_expression -> int_expression NEQL int_expression .)
    DO              reduce using rule 29 (bool_expression -> int_expression NEQL int_expression .)
    END             reduce using rule 29 (bool_expression -> int_expression NEQL int_expression .)
    SEMICOLON       reduce using rule 29 (bool_expression -> int_expression NEQL int_expression .)
    ELSE            reduce using rule 29 (bool_expression -> int_expression NEQL int_expression .)
    RPAREN          reduce using rule 29 (bool_expression -> int_expression NEQL int_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    MOD             shift and go to state 53


state 68

    (30) bool_expression -> int_expression LE int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    AND             reduce using rule 30 (bool_expression -> int_expression LE int_expression .)
    OR              reduce using rule 30 (bool_expression -> int_expression LE int_expression .)
    THEN            reduce using rule 30 (bool_expression -> int_expression LE int_expression .)
    DO              reduce using rule 30 (bool_expression -> int_expression LE int_expression .)
    END             reduce using rule 30 (bool_expression -> int_expression LE int_expression .)
    SEMICOLON       reduce using rule 30 (bool_expression -> int_expression LE int_expression .)
    ELSE            reduce using rule 30 (bool_expression -> int_expression LE int_expression .)
    RPAREN          reduce using rule 30 (bool_expression -> int_expression LE int_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    MOD             shift and go to state 53


state 69

    (31) bool_expression -> int_expression GE int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    AND             reduce using rule 31 (bool_expression -> int_expression GE int_expression .)
    OR              reduce using rule 31 (bool_expression -> int_expression GE int_expression .)
    THEN            reduce using rule 31 (bool_expression -> int_expression GE int_expression .)
    DO              reduce using rule 31 (bool_expression -> int_expression GE int_expression .)
    END             reduce using rule 31 (bool_expression -> int_expression GE int_expression .)
    SEMICOLON       reduce using rule 31 (bool_expression -> int_expression GE int_expression .)
    ELSE            reduce using rule 31 (bool_expression -> int_expression GE int_expression .)
    RPAREN          reduce using rule 31 (bool_expression -> int_expression GE int_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    MOD             shift and go to state 53


state 70

    (20) int_expression -> int_expression PLUS int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    LT              reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    EQL             reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    GT              reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    NEQL            reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    LE              reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    GE              reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    MINUS           reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    MOD             reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    THEN            reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    DO              reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    END             reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    SEMICOLON       reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    ELSE            reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    RPAREN          reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    AND             reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    OR              reduce using rule 20 (int_expression -> int_expression PLUS int_expression .)
    PLUS            shift and go to state 49
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! PLUS            [ reduce using rule 20 (int_expression -> int_expression PLUS int_expression .) ]
  ! MUL             [ reduce using rule 20 (int_expression -> int_expression PLUS int_expression .) ]
  ! DIV             [ reduce using rule 20 (int_expression -> int_expression PLUS int_expression .) ]
  ! MINUS           [ shift and go to state 50 ]
  ! MOD             [ shift and go to state 53 ]


state 71

    (21) int_expression -> int_expression MINUS int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    LT              reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    EQL             reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    GT              reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    NEQL            reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    LE              reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    GE              reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    MOD             reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    THEN            reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    DO              reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    END             reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    SEMICOLON       reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    ELSE            reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    RPAREN          reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    AND             reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    OR              reduce using rule 21 (int_expression -> int_expression MINUS int_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! PLUS            [ reduce using rule 21 (int_expression -> int_expression MINUS int_expression .) ]
  ! MINUS           [ reduce using rule 21 (int_expression -> int_expression MINUS int_expression .) ]
  ! MUL             [ reduce using rule 21 (int_expression -> int_expression MINUS int_expression .) ]
  ! DIV             [ reduce using rule 21 (int_expression -> int_expression MINUS int_expression .) ]
  ! MOD             [ shift and go to state 53 ]


state 72

    (22) int_expression -> int_expression MUL int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    LT              reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    EQL             reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    GT              reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    NEQL            reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    LE              reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    GE              reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    PLUS            reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    MINUS           reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    DIV             reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    MOD             reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    THEN            reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    DO              reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    END             reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    SEMICOLON       reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    ELSE            reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    RPAREN          reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    AND             reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    OR              reduce using rule 22 (int_expression -> int_expression MUL int_expression .)
    MUL             shift and go to state 51

  ! MUL             [ reduce using rule 22 (int_expression -> int_expression MUL int_expression .) ]
  ! PLUS            [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 50 ]
  ! DIV             [ shift and go to state 52 ]
  ! MOD             [ shift and go to state 53 ]


state 73

    (23) int_expression -> int_expression DIV int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

    LT              reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    EQL             reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    GT              reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    NEQL            reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    LE              reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    GE              reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    PLUS            reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    MINUS           reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    MOD             reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    THEN            reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    DO              reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    END             reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    SEMICOLON       reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    ELSE            reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    RPAREN          reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    AND             reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    OR              reduce using rule 23 (int_expression -> int_expression DIV int_expression .)
    MUL             shift and go to state 51
    DIV             shift and go to state 52

  ! MUL             [ reduce using rule 23 (int_expression -> int_expression DIV int_expression .) ]
  ! DIV             [ reduce using rule 23 (int_expression -> int_expression DIV int_expression .) ]
  ! PLUS            [ shift and go to state 49 ]
  ! MINUS           [ shift and go to state 50 ]
  ! MOD             [ shift and go to state 53 ]


state 74

    (24) int_expression -> int_expression MOD int_expression .
    (20) int_expression -> int_expression . PLUS int_expression
    (21) int_expression -> int_expression . MINUS int_expression
    (22) int_expression -> int_expression . MUL int_expression
    (23) int_expression -> int_expression . DIV int_expression
    (24) int_expression -> int_expression . MOD int_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
  ! shift/reduce conflict for MOD resolved as shift
    LT              reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    EQL             reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    GT              reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    NEQL            reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    LE              reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    GE              reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    THEN            reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    DO              reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    END             reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    SEMICOLON       reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    ELSE            reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    RPAREN          reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    AND             reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    OR              reduce using rule 24 (int_expression -> int_expression MOD int_expression .)
    PLUS            shift and go to state 49
    MINUS           shift and go to state 50
    MUL             shift and go to state 51
    DIV             shift and go to state 52
    MOD             shift and go to state 53

  ! PLUS            [ reduce using rule 24 (int_expression -> int_expression MOD int_expression .) ]
  ! MINUS           [ reduce using rule 24 (int_expression -> int_expression MOD int_expression .) ]
  ! MUL             [ reduce using rule 24 (int_expression -> int_expression MOD int_expression .) ]
  ! DIV             [ reduce using rule 24 (int_expression -> int_expression MOD int_expression .) ]
  ! MOD             [ reduce using rule 24 (int_expression -> int_expression MOD int_expression .) ]


state 75

    (15) statement -> WHILE expression DO statement .

    END             reduce using rule 15 (statement -> WHILE expression DO statement .)
    SEMICOLON       reduce using rule 15 (statement -> WHILE expression DO statement .)
    ELSE            reduce using rule 15 (statement -> WHILE expression DO statement .)


state 76

    (17) statement -> PRINT LPAREN expression RPAREN .

    END             reduce using rule 17 (statement -> PRINT LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 17 (statement -> PRINT LPAREN expression RPAREN .)
    ELSE            reduce using rule 17 (statement -> PRINT LPAREN expression RPAREN .)


state 77

    (5) declarion_list -> declarion_list SEMICOLON identifier_list COLON type .

    SEMICOLON       reduce using rule 5 (declarion_list -> declarion_list SEMICOLON identifier_list COLON type .)
    BEGIN           reduce using rule 5 (declarion_list -> declarion_list SEMICOLON identifier_list COLON type .)


state 78

    (13) statement -> IF expression THEN statement ELSE . statement
    (12) statement -> . IDENTIFIER ASSIGN expression
    (13) statement -> . IF expression THEN statement ELSE statement
    (14) statement -> . IF expression THEN statement
    (15) statement -> . WHILE expression DO statement
    (16) statement -> . compound_statement
    (17) statement -> . PRINT LPAREN expression RPAREN
    (9) compound_statement -> . BEGIN statement_list END

    IDENTIFIER      shift and go to state 12
    IF              shift and go to state 13
    WHILE           shift and go to state 14
    PRINT           shift and go to state 16
    BEGIN           shift and go to state 6

    statement                      shift and go to state 79
    compound_statement             shift and go to state 15

state 79

    (13) statement -> IF expression THEN statement ELSE statement .

    END             reduce using rule 13 (statement -> IF expression THEN statement ELSE statement .)
    SEMICOLON       reduce using rule 13 (statement -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 13 (statement -> IF expression THEN statement ELSE statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for AND in state 54 resolved as shift
WARNING: shift/reduce conflict for OR in state 54 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 60 resolved as shift
WARNING: shift/reduce conflict for AND in state 62 resolved as shift
WARNING: shift/reduce conflict for OR in state 62 resolved as shift
WARNING: shift/reduce conflict for AND in state 63 resolved as shift
WARNING: shift/reduce conflict for OR in state 63 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MUL in state 74 resolved as shift
WARNING: shift/reduce conflict for DIV in state 74 resolved as shift
WARNING: shift/reduce conflict for MOD in state 74 resolved as shift
