
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightMINUSrightPLUSrightDIVrightMULrightUMINUSrightIFAND ASSIGN BEGIN COLON COMMA DIV DO ELSE END EQL GE GT IDENTIFIER IF INT LE LPAREN LT MINUS MOD MUL NEG NEQL NOT NUMBER OR PLUS PRINT PROGRAM REAL RPAREN SEMICOLON THEN UMINUS VAR WHILEprogram_p : PROGRAM  declarations compound_statementdeclarations : VAR declarion_list declarations : declarion_list : identifier_list COLON typedeclarion_list : declarion_list SEMICOLON identifier_list COLON typeidentifier_list : IDENTIFIERidentifier_list : identifier_list COMMA IDENTIFIERtype : INTcompound_statement : BEGIN statement_list ENDstatement_list : statementstatement_list : statement_list SEMICOLON statementstatement : IDENTIFIER ASSIGN expressionstatement : IF expression THEN statement ELSE statementstatement : IF expression THEN statementstatement : WHILE expression DO statementstatement : compound_statementstatement : PRINT LPAREN expression RPARENint_expression : INTexpression : IDENTIFIERint_expression : int_expression PLUS int_expressionint_expression : int_expression MINUS int_expressionint_expression : int_expression MUL int_expressionint_expression : int_expression DIV int_expressionint_expression : int_expression MOD int_expressionint_expression : UMINUS int_expressionbool_expression : int_expression LT int_expressionbool_expression : int_expression EQL int_expressionbool_expression : int_expression GT int_expressionbool_expression : int_expression NEQL int_expressionbool_expression : int_expression LE int_expressionbool_expression : int_expression GE int_expressionbool_expression : bool_expression AND bool_expressionbool_expression : bool_expression OR bool_expressionbool_expression : NOT bool_expressionexpression : LPAREN expression RPARENexpression : bool_expressionexpression : int_expression'
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,20,],[0,-1,-9,]),'VAR':([2,],[4,]),'BEGIN':([2,3,6,7,21,34,35,39,57,77,78,],[-3,6,6,-2,6,-4,-8,6,6,-5,6,]),'IDENTIFIER':([4,6,13,14,17,19,21,22,25,32,39,57,78,],[9,12,24,24,9,36,12,24,24,24,12,12,12,]),'IF':([6,21,39,57,78,],[13,13,13,13,13,]),'WHILE':([6,21,39,57,78,],[14,14,14,14,14,]),'PRINT':([6,21,39,57,78,],[16,16,16,16,16,]),'SEMICOLON':([7,10,11,15,20,24,26,27,29,34,35,37,38,54,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,79,],[17,21,-10,-16,-9,-19,-36,-37,-18,-4,-8,-11,-12,-34,-25,-14,-35,-32,-33,-26,-27,-28,-29,-30,-31,-20,-21,-22,-23,-24,-15,-17,-5,-13,]),'COLON':([8,9,33,36,],[18,-6,59,-7,]),'COMMA':([8,9,33,36,],[19,-6,19,-7,]),'END':([10,11,15,20,24,26,27,29,37,38,54,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,],[20,-10,-16,-9,-19,-36,-37,-18,-11,-12,-34,-25,-14,-35,-32,-33,-26,-27,-28,-29,-30,-31,-20,-21,-22,-23,-24,-15,-17,-13,]),'ASSIGN':([12,],[22,]),'LPAREN':([13,14,16,22,25,32,],[25,25,32,25,25,25,]),'NOT':([13,14,22,25,28,32,41,42,],[28,28,28,28,28,28,28,28,]),'INT':([13,14,18,22,25,28,30,32,41,42,43,44,45,46,47,48,49,50,51,52,53,59,],[29,29,35,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,35,]),'UMINUS':([13,14,22,25,28,30,32,41,42,43,44,45,46,47,48,49,50,51,52,53,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'ELSE':([15,20,24,26,27,29,38,54,56,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,79,],[-16,-9,-19,-36,-37,-18,-12,-34,-25,78,-35,-32,-33,-26,-27,-28,-29,-30,-31,-20,-21,-22,-23,-24,-15,-17,-13,]),'THEN':([23,24,26,27,29,54,56,61,62,63,64,65,66,67,68,69,70,71,72,73,74,],[39,-19,-36,-37,-18,-34,-25,-35,-32,-33,-26,-27,-28,-29,-30,-31,-20,-21,-22,-23,-24,]),'DO':([24,26,27,29,31,54,56,61,62,63,64,65,66,67,68,69,70,71,72,73,74,],[-19,-36,-37,-18,57,-34,-25,-35,-32,-33,-26,-27,-28,-29,-30,-31,-20,-21,-22,-23,-24,]),'RPAREN':([24,26,27,29,40,54,56,58,61,62,63,64,65,66,67,68,69,70,71,72,73,74,],[-19,-36,-37,-18,61,-34,-25,76,-35,-32,-33,-26,-27,-28,-29,-30,-31,-20,-21,-22,-23,-24,]),'AND':([26,29,54,56,62,63,64,65,66,67,68,69,70,71,72,73,74,],[41,-18,41,-25,41,41,-26,-27,-28,-29,-30,-31,-20,-21,-22,-23,-24,]),'OR':([26,29,54,56,62,63,64,65,66,67,68,69,70,71,72,73,74,],[42,-18,42,-25,42,42,-26,-27,-28,-29,-30,-31,-20,-21,-22,-23,-24,]),'LT':([27,29,55,56,70,71,72,73,74,],[43,-18,43,-25,-20,-21,-22,-23,-24,]),'EQL':([27,29,55,56,70,71,72,73,74,],[44,-18,44,-25,-20,-21,-22,-23,-24,]),'GT':([27,29,55,56,70,71,72,73,74,],[45,-18,45,-25,-20,-21,-22,-23,-24,]),'NEQL':([27,29,55,56,70,71,72,73,74,],[46,-18,46,-25,-20,-21,-22,-23,-24,]),'LE':([27,29,55,56,70,71,72,73,74,],[47,-18,47,-25,-20,-21,-22,-23,-24,]),'GE':([27,29,55,56,70,71,72,73,74,],[48,-18,48,-25,-20,-21,-22,-23,-24,]),'PLUS':([27,29,55,56,64,65,66,67,68,69,70,71,72,73,74,],[49,-18,49,-25,49,49,49,49,49,49,49,49,-22,-23,49,]),'MINUS':([27,29,55,56,64,65,66,67,68,69,70,71,72,73,74,],[50,-18,50,-25,50,50,50,50,50,50,-20,50,-22,-23,50,]),'MUL':([27,29,55,56,64,65,66,67,68,69,70,71,72,73,74,],[51,-18,51,-25,51,51,51,51,51,51,51,51,51,51,51,]),'DIV':([27,29,55,56,64,65,66,67,68,69,70,71,72,73,74,],[52,-18,52,-25,52,52,52,52,52,52,52,52,-22,52,52,]),'MOD':([27,29,55,56,64,65,66,67,68,69,70,71,72,73,74,],[53,-18,53,-25,53,53,53,53,53,53,-20,-21,-22,-23,53,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program_p':([0,],[1,]),'declarations':([2,],[3,]),'compound_statement':([3,6,21,39,57,78,],[5,15,15,15,15,15,]),'declarion_list':([4,],[7,]),'identifier_list':([4,17,],[8,33,]),'statement_list':([6,],[10,]),'statement':([6,21,39,57,78,],[11,37,60,75,79,]),'expression':([13,14,22,25,32,],[23,31,38,40,58,]),'bool_expression':([13,14,22,25,28,32,41,42,],[26,26,26,26,54,26,62,63,]),'int_expression':([13,14,22,25,28,30,32,41,42,43,44,45,46,47,48,49,50,51,52,53,],[27,27,27,27,55,56,27,55,55,64,65,66,67,68,69,70,71,72,73,74,]),'type':([18,59,],[34,77,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program_p","S'",1,None,None,None),
  ('program_p -> PROGRAM declarations compound_statement','program_p',3,'p_program','app.py',228),
  ('declarations -> VAR declarion_list','declarations',2,'p_declarationsVar','app.py',233),
  ('declarations -> <empty>','declarations',0,'p_declarations','app.py',238),
  ('declarion_list -> identifier_list COLON type','declarion_list',3,'p_declarionList','app.py',243),
  ('declarion_list -> declarion_list SEMICOLON identifier_list COLON type','declarion_list',5,'p_declarionListNested','app.py',248),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifierList','app.py',253),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifierListNested','app.py',258),
  ('type -> INT','type',1,'p_type','app.py',263),
  ('compound_statement -> BEGIN statement_list END','compound_statement',3,'p_compoundsStatement','app.py',268),
  ('statement_list -> statement','statement_list',1,'p_statementList','app.py',273),
  ('statement_list -> statement_list SEMICOLON statement','statement_list',3,'p_statementListNested','app.py',278),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement','app.py',283),
  ('statement -> IF expression THEN statement ELSE statement','statement',6,'p_statementWithElse','app.py',288),
  ('statement -> IF expression THEN statement','statement',4,'p_statementWithoutElse','app.py',294),
  ('statement -> WHILE expression DO statement','statement',4,'p_statementLoop','app.py',299),
  ('statement -> compound_statement','statement',1,'p_statementComp','app.py',303),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_statementPrint','app.py',308),
  ('int_expression -> INT','int_expression',1,'p_expression','app.py',313),
  ('expression -> IDENTIFIER','expression',1,'p_expressionid','app.py',318),
  ('int_expression -> int_expression PLUS int_expression','int_expression',3,'p_expressionPlus','app.py',323),
  ('int_expression -> int_expression MINUS int_expression','int_expression',3,'p_expressionMinus','app.py',328),
  ('int_expression -> int_expression MUL int_expression','int_expression',3,'p_expressionMul','app.py',333),
  ('int_expression -> int_expression DIV int_expression','int_expression',3,'p_expressionDiv','app.py',338),
  ('int_expression -> int_expression MOD int_expression','int_expression',3,'p_expressionMod','app.py',343),
  ('int_expression -> UMINUS int_expression','int_expression',2,'p_expressionUminus','app.py',348),
  ('bool_expression -> int_expression LT int_expression','bool_expression',3,'p_expressionLt','app.py',352),
  ('bool_expression -> int_expression EQL int_expression','bool_expression',3,'p_expressionEql','app.py',356),
  ('bool_expression -> int_expression GT int_expression','bool_expression',3,'p_expressionGt','app.py',360),
  ('bool_expression -> int_expression NEQL int_expression','bool_expression',3,'p_expressionNeql','app.py',364),
  ('bool_expression -> int_expression LE int_expression','bool_expression',3,'p_expressionLe','app.py',368),
  ('bool_expression -> int_expression GE int_expression','bool_expression',3,'p_expressionGe','app.py',372),
  ('bool_expression -> bool_expression AND bool_expression','bool_expression',3,'p_expressionAnd','app.py',376),
  ('bool_expression -> bool_expression OR bool_expression','bool_expression',3,'p_expressionOr','app.py',380),
  ('bool_expression -> NOT bool_expression','bool_expression',2,'p_expressionNot','app.py',384),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expressionParen','app.py',388),
  ('expression -> bool_expression','expression',1,'p_expressionBool','app.py',392),
  ('expression -> int_expression','expression',1,'p_expressionInt','app.py',396),
]
